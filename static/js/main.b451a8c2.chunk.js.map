{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Errorboundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Errorboundary","state","hasError","error","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filterRobot","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"yRAgBeA,G,MAbF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,MAAOC,EAAM,EAANA,GAC3B,OACC,yBAAKC,UAAU,0DACd,yBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,KACzD,6BACC,4BAAKL,GACL,2BAAIC,OCOOK,EAbE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEZC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACvC,OAAO,kBAAC,EAAD,CAAMC,IAAOL,EAAOI,GAAGT,GAAIA,GAAMK,EAAOI,GAAGT,GAAIF,KAAQO,EAAOI,GAAGX,KAAMC,MAASM,EAAOI,GAAGV,WAGlG,OACC,6BACEO,ICGWK,EAZG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACnB,OACC,yBAAKX,UAAY,OAChB,2BAAOA,UAAY,kCAClBY,KAAK,OACLC,YAAY,eACZC,SAAYH,MCEDI,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,iBAAkBC,OAAO,UAC/DJ,EAAMK,WCiBKC,E,kDAnBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CAACC,UAAW,GAFR,E,8DAKAC,GACjBC,KAAKC,SAAS,CAACH,UAAW,M,+BAI1B,OAAGE,KAAKH,MAAMC,SACN,gDAGDE,KAAKV,MAAMK,a,GAfQO,aCiDbC,G,wDA1Cd,aAAc,IAAD,8BACZ,gBAODC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAcD,EAAME,OAAOC,SAP1C,EAAKX,MAAQ,CACZnB,OAAQ,GACR4B,YAAa,IAJF,E,gEAYO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKZ,SAAS,CAACvB,OAAOmC,S,+BAG3B,IAAD,OACDC,EAAcd,KAAKH,MAAMnB,OAAOqC,QAAO,SAACC,GAC7C,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAS,EAAKrB,MAAMS,YAAYW,kBAGjE,OAAgC,IAA7BjB,KAAKH,MAAMnB,OAAOyC,OACb,0CAIN,yBAAK7C,UAAU,MACd,2CACA,kBAAC,EAAD,CAAWW,aAAgBe,KAAKI,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU1B,OAAUoC,W,GAlCTZ,cCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,6BACC,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.b451a8c2.chunk.js","sourcesContent":["import React from 'react';\nimport './robofriend.css';\n\nconst Card = ({name, email, id})=>{\n\treturn(\n\t\t<div className=\"brW tc bg-light-blue dib br3 pa3 ma3 grow bw2 shadow-5\">\n\t\t\t<img src={`https://robohash.org/${id}?size=200x200`} alt=\"\"/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\n\t)\n}\n\nexport default Card;\n\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots})=>{\n\t\t\n\tconst cardComponent = robots.map((user, i)=>{\n\t\treturn <Card key = {robots[i].id} id = {robots[i].id} name = {robots[i].name} email = {robots[i].email}/>\n\t})\n\n\treturn(\n\t\t<div>\n\t\t\t{cardComponent}\n\t\t</div>\n\t)\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange})=>{\n\treturn(\n\t\t<div className = \"pa2\">\n\t\t\t<input className = \"pa3 b b--green bg-lightest-blue\" \n\t\t\t\ttype=\"text\" \n\t\t\t\tplaceholder=\"Search Robot\"\n\t\t\t\tonChange = {searchChange}\n\t\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props)=>{\n\treturn(\n\t\t<div style={{overflowY:\"scroll\", border:\"2px solid #000\", height:\"100vh\"}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React, {Component} from \"react\";\n\nclass Errorboundary extends Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {hasError : false};\n\t}\n\n\tcomponentDidCatch(error){\n\t\tthis.setState({hasError : true});\n\t}\n\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>Somethings Wrong</h1>\n\t\t}\n\t\n\t\treturn this.props.children\n\t\n\t}\n} \n\nexport default Errorboundary;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\n// import {robots} from './components/robots';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Errorboundary from '../components/Errorboundary';\nimport './App.css';\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchField: \"\",\n\t\t}\n\t}\n\n\tonSearchChange = (event)=>{\n\t\tthis.setState({searchField : event.target.value}); \n\t}\n\n\tcomponentDidMount(){\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t.then(response=>response.json())\n\t\t.then(users=>this.setState({robots:users}));\n\t}\n\n\trender(){\n\t\tconst filterRobot = this.state.robots.filter((robot)=>{\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n\t\t});\n\n\t\tif(this.state.robots.length === 0){\n\t\t\treturn <h1>Loading...</h1>\n\t\t}\n\t\telse{\n\t\t\treturn(\n\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t<h1>Robofriends</h1>\n\t\t\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<Errorboundary>\n\t\t\t\t\t\t\t<CardList robots = {filterRobot}/>\n\t\t\t\t\t\t</Errorboundary>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\t\n\t\t\t);\n\t\t}\t\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<div>\n  \t\t<App />\n  \t</div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}